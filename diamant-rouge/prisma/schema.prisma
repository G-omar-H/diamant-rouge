// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------------------------------------
// PRODUCT & TRANSLATIONS
// --------------------------------------------------------------------
model Product {
  id           Int                  @id @default(autoincrement())
  sku          String               @unique
  basePrice    Decimal              @default(0.0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  categoryId   Int?
  // Relationship fields
  translations ProductTranslation[]
  category     Category?            @relation(fields: [categoryId], references: [id])
  variations   ProductVariation[]
  wishlists    Wishlist[]
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  language    String
  name        String
  description String
  productId   Int
  product     Product @relation(fields: [productId], references: [id])
}

// --------------------------------------------------------------------
// CATEGORY & TRANSLATIONS
// --------------------------------------------------------------------
model Category {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations CategoryTranslation[]
  products     Product[]
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  language    String
  name        String
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}

// --------------------------------------------------------------------
// PRODUCT VARIATIONS
// (e.g., ring sizes, gem types, metal colors, etc.)
// --------------------------------------------------------------------
model ProductVariation {
  id              Int     @id @default(autoincrement())
  productId       Int
  variationType   String
  variationValue  String
  additionalPrice Decimal @default(0.0)

  product Product @relation(fields: [productId], references: [id])
}

// --------------------------------------------------------------------
// USER TABLE
// --------------------------------------------------------------------
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  wishlists Wishlist[]
}

// --------------------------------------------------------------------
// ORDER & ORDER ITEMS
// (Basic placeholder for future expansions)
// --------------------------------------------------------------------
model Order {
  id          Int      @id @default(autoincrement())
  userId      Int?
  totalAmount Decimal  @default(0.0)
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Decimal @default(0.0)

  order Order @relation(fields: [orderId], references: [id])
  // For more detail, you might also link to a specific variation if needed
}

// --------------------------------------------------------------------
// WISHLIST TABLE
// --------------------------------------------------------------------
model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  // For simplicity, store product IDs.
  // Alternatively, create a separate table for many-to-many relationship.
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}
