generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           Int                  @id @default(autoincrement())
  sku          String               @unique
  basePrice    Decimal              @default(0.0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  categoryId   Int?
  images       String[]             @default([])
  featured     Boolean              @default(false)
  cartItems    CartItem[]
  orderItems   OrderItem[]
  category     Category?            @relation(fields: [categoryId], references: [id])
  translations ProductTranslation[]
  variations   ProductVariation[]
  wishlists    Wishlist[]
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  language    String
  name        String
  description String
  productId   Int
  product     Product @relation(fields: [productId], references: [id])
}

model Category {
  id           Int                   @id @default(autoincrement())
  slug         String                @unique
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations CategoryTranslation[]
  products     Product[]
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  language    String
  name        String
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}

model ProductVariation {
  id              Int        @id @default(autoincrement())
  productId       Int
  variationType   String
  variationValue  String
  additionalPrice Decimal    @default(0.0)
  inventory       Int        @default(0)
  cartItems       CartItem[]
  product         Product    @relation(fields: [productId], references: [id])
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  password           String
  name               String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  role               String         @default("customer")
  address            String?
  city               String?
  country            String?
  phoneNumber        String?
  postalCode         String?
  resetToken         String?
  resetTokenExpiry   DateTime?
  braceletSize       String?
  memberStatus       String         @default("regular")
  necklaceLength     String?
  preferredGemstones String[]       @default([])
  preferredMetals    String[]       @default([])
  ringSize           String?
  appointments       Appointment[]
  cartItems          CartItem[]
  notifications      Notification[]
  orders             Order[]
  wishlists          Wishlist[]
}

model CartItem {
  id          Int               @id @default(autoincrement())
  userId      Int
  productId   Int
  quantity    Int               @default(1)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  variationId Int?
  product     Product           @relation(fields: [productId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int?
  totalAmount     Decimal     @default(0.0)
  status          String      @default("PENDING")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  city            String?
  country         String?
  postalCode      String?
  shippingAddress String?
  paymentMethod   String
  user            User?       @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Decimal @default(0.0)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Appointment {
  id                  Int      @id @default(autoincrement())
  userId              Int?
  clientEmail         String
  clientPhone         String?
  appointmentDate     DateTime
  appointmentTime     String
  duration            String   @default("60")
  status              String   @default("PENDING")
  location            String
  locationType        String
  appointmentType     String
  appointmentTypeLabel String
  guestCount          Int      @default(1)
  preferences         String?
  specialRequests     String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}
