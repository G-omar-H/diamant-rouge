// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------------------------------------
// PRODUCT & TRANSLATIONS
// --------------------------------------------------------------------
model Product {
  id           Int                  @id @default(autoincrement())
  sku          String               @unique
  basePrice    Decimal              @default(0.0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  categoryId   Int?
  images       String[]             @default([])
  translations ProductTranslation[]
  category     Category?            @relation(fields: [categoryId], references: [id])
  variations   ProductVariation[]
  wishlists    Wishlist[]
  orderItems   OrderItem[]
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  language    String
  name        String
  description String
  productId   Int
  product     Product @relation(fields: [productId], references: [id])
}

// --------------------------------------------------------------------
// CATEGORY & TRANSLATIONS
// --------------------------------------------------------------------
model Category {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations CategoryTranslation[]
  products     Product[]
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  language    String
  name        String
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}

// --------------------------------------------------------------------
// PRODUCT VARIATIONS
// (e.g., ring sizes, gem types, metal colors, etc.)
// --------------------------------------------------------------------
model ProductVariation {
  id              Int     @id @default(autoincrement())
  productId       Int
  variationType   String
  variationValue  String
  additionalPrice Decimal @default(0.0)
  inventory       Int     @default(0)

  product Product @relation(fields: [productId], references: [id])
}

// --------------------------------------------------------------------
// USER TABLE
// --------------------------------------------------------------------
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String // hashed password stored here
  name      String?
  role      String   @default("customer") // can be 'admin' or 'customer'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  wishlists Wishlist[]
}

// --------------------------------------------------------------------
// ORDER & ORDER ITEMS
// (Basic placeholder for future expansions)
// --------------------------------------------------------------------
model Order {
  id            Int      @id @default(autoincrement())
  userId        Int?
  totalAmount   Decimal  @default(0.0)
  status        String   @default("PENDING") // Could be PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
  paymentMethod String // ✅ NEW: Added Payment Method Field
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Added shipping details
  shippingAddress String?
  city            String?
  postalCode      String?
  country         String?

  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Decimal @default(0.0)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  // For more detail, you might also link to a specific variation if needed
}

// --------------------------------------------------------------------
// WISHLIST TABLE
// --------------------------------------------------------------------
model Wishlist {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // ✅ Prevent duplicate wishlist entries
}
